<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"><channel><title>Conteúdo de Antonio Terceiro marcado com a tag "git"</title><link>http://softwarelivre.org/terceiro</link><description>Conteúdo de Antonio Terceiro marcado com a tag "git"</description><item><title>Handling upstream patches with git-export-debian-patches</title><description>&lt;p&gt;These days I briefly discussed with a fellow Debian developer about how to maintain upstream patches in Debian packages with Git, what brought me to rethink a little about my current practices. What I usually do is pretty much like point 4 in Raphael's post &lt;a href="https://raphaelhertzog.com/2010/11/18/4-tips-to-maintain-a-3-0-quilt-debian-source-package-in-a-vcs/"&gt;"4 tips to maintain a “3.0 (quilt)” Debian source package in a VCS"&lt;/a&gt;:  I make commits in the Debian packaging branch, or in a separate branch that is merged into the Debian packaging branch. Then I add the &lt;code&gt;single-debian-patch&lt;/code&gt; option to &lt;code&gt;debian/source/options&lt;/code&gt; so that a single Debian patch is generated, and include a patch header that points people interested in the individual changes to the public Git repository where they were originally done.&lt;/p&gt;
&lt;p&gt;My reasoning for doing so was the following: most upstream developers will hardly care enough to come check the patches applied against their source in Debian, so it's not so important to have a clean source package with separated and explained patches. But then there is the people who will actually care about the patches: other distribution developers. Not imposing a specific VCS on them to review the patches applied in Debian is a nice thing to do.&lt;/p&gt;
&lt;p&gt;Then I wrote a script called git-export-debian-patches (&lt;a href="/terceiro/files/git-export-debian-patches/git-export-debian-patches"&gt;download&lt;/a&gt;, &lt;a href="/terceiro/files/git-export-debian-patches/manpage"&gt;manpage&lt;/a&gt;), which was partly inspired by &lt;a href="http://www.cs.unb.ca/~bremner/blog/posts/git-classify/"&gt;David Bremner's script&lt;/a&gt;. It exports all commits in the Debian packaging branch that do not touch files under debian/ and were not applied upstream to debian/patches. The script also creates an appropriate debian/patches/series files. The script is even smart enough to detect patches that were later reverted in the Debian branch and exclude them (and the commit that reverted them) from the patch list.&lt;/p&gt;
&lt;p&gt;The advantage I see over gbp-pq is that I don't need to rebase (and thus lose history) to have a clean set of patches. The advantage over the &lt;a href="http://www.cs.unb.ca/~bremner/blog/posts/yagq/"&gt;gitpkg quilt-patches-deb-export-hook hook&lt;/a&gt; is that I don't need to explicitly say which ranges I want: every change that is merged in master, was not applied upstream and was not reverted gets listed as a patch. To be honest I don't have any experience with either gbp-pq or gitpkg and these advantages were based on what I read, so please leave a (nice ;-)) comment if I said something stupid.&lt;/p&gt;
&lt;p&gt;I am looking forward to receive feedback about the tool, specially about potential corner cases in which it would break. For now I have tested it in a &lt;a href="http://anonscm.debian.org/gitweb/?p=pkg-ruby-extras/cucumber.git;a=summary"&gt;package&lt;/a&gt; with simple changes agains upstream source, and it seems fine.&lt;/p&gt;</description><pubDate>Sat, 13 Aug 2011 22:03:41 +0000</pubDate><link>http://softwarelivre.org/terceiro/blog/handling-upstream-patches-with-git-export-debian-patches</link><guid>http://softwarelivre.org/terceiro/blog/handling-upstream-patches-with-git-export-debian-patches</guid></item><item><title>A better svn diff</title><description>&lt;p&gt;Since I started using &lt;a href="http://git-scm.org/"&gt;git&lt;/a&gt;, every time I need to use &lt;a href="http://subversion.tigris.org/"&gt;Subversion&lt;/a&gt; again I suffer. The output of `git diff` is so nice compared to the one produced `svn diff` that it hurts. I've alredy been struggling with that &lt;a href="/terceiro/blog/fazendo-o-svn-diff-ser-suportavel"&gt;previously&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now I think I've achieved the perfect solution to make `svn diff` behave just like `git diff`. I've documented it in this post hoping to help other poor souls like me who still have to use Subversion now and then.&lt;/p&gt;
&lt;p&gt;Step 1: install &lt;a href="http://colordiff.sourceforge.net/"&gt;colordiff&lt;/a&gt;. It's installed on Debian, so the installation required me no effort at all.&lt;/p&gt;
&lt;p&gt;Step2 (optional): configure colordiff to use your preferred set of colors. My ~/.colordiffrc contains the following, to match the same colors used by default by `git diff`:&lt;/p&gt;
&lt;pre style="padding: 1em; background-color: black; color: white;"&gt;banner=no&lt;br&gt;color_patches=no&lt;br&gt;plain=off&lt;br&gt;newtext=darkgreen&lt;br&gt;oldtext=darkred&lt;br&gt;diffstuff=white&lt;br&gt;cvsstuff=darkyellow&lt;/pre&gt;
&lt;p&gt;Step 3: create a script to be called by Subversion when running `svn diff`. In my case, I called it svn-diff and stored it in ~/bin (which is in my $PATH), but you can put it in /usr/local/bin or any other directory that is in your $PATH. The contents of ~/bin/svn-diff is the following:&lt;/p&gt;
&lt;pre style="padding: 1em; background-color: black; color: white;"&gt;&lt;span class="Comment"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="Statement"&gt; &lt;/span&gt;colordiff &lt;span class="Statement"&gt;-u&lt;/span&gt; &lt;span class="Statement"&gt;-L&lt;/span&gt; &lt;span class="Statement"&gt;"&lt;/span&gt;&lt;span class="PreProc"&gt;${&lt;/span&gt;&lt;span class="PreProc"&gt;3&lt;/span&gt;&lt;span class="PreProc"&gt;}&lt;/span&gt;&lt;span class="Statement"&gt;"&lt;/span&gt; &lt;span class="Statement"&gt;-L&lt;/span&gt; &lt;span class="Statement"&gt;"&lt;/span&gt;&lt;span class="PreProc"&gt;${&lt;/span&gt;&lt;span class="PreProc"&gt;5&lt;/span&gt;&lt;span class="PreProc"&gt;}&lt;/span&gt;&lt;span class="Statement"&gt;"&lt;/span&gt; &lt;span class="Statement"&gt;"&lt;/span&gt;&lt;span class="PreProc"&gt;${&lt;/span&gt;&lt;span class="PreProc"&gt;6&lt;/span&gt;&lt;span class="PreProc"&gt;}&lt;/span&gt;&lt;span class="Statement"&gt;"&lt;/span&gt; &lt;span class="Statement"&gt;"&lt;/span&gt;&lt;span class="PreProc"&gt;${&lt;/span&gt;&lt;span class="PreProc"&gt;7&lt;/span&gt;&lt;span class="PreProc"&gt;}&lt;/span&gt;&lt;span class="Statement"&gt;"&lt;/span&gt;
&lt;span class="Statement"&gt; &lt;/span&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;After creating the script, you need to make it executable:&lt;/p&gt;
&lt;pre style="padding: 1em; background-color: black; color: white;"&gt;$ chmod +x ~/bin/svn-diff&lt;/pre&gt;
&lt;p&gt;Step 4: tell Subversion to use your script instead of plain diff on `svn diff`. To do that, locate the "helpers" section in your Subversion configuration file (~/.subversion/config), and set the diff-cmd setting to the name you gave to your custom script (svn-diff in my case):&lt;/p&gt;
&lt;pre style="padding: 1em; background-color: black; color: white;"&gt;[helpers]&lt;br&gt;diff-cmd = svn-diff&lt;/pre&gt;
&lt;p&gt;There is only one thing missing with regard to `git diff`: the nice pager behaviour. Git invokes that system pager in a way that less will receives the options "-FRSX". These options make less exit imediately if the output fits in one terminal screen and output the ANSI sequences (and thus colors) generated by colordiff in raw format, among other things. I couldn't find a way to emulate this: since `svn diff` will call our custom  diff command once for each changed file, we can't call the pager inside svn-diff. A comprimise is doing `svn diff | less -FRSX` , or setting the LESS environment variable to 'FRSX' and doing simply `svn diff | less`.&lt;/p&gt;
&lt;p&gt;That's it! Now you can almost forget you are using Subversion (until you need to do some merging).&lt;/p&gt;</description><pubDate>Wed, 06 Oct 2010 17:01:58 +0000</pubDate><link>http://softwarelivre.org/terceiro/blog/a-better-svn-diff</link><guid>http://softwarelivre.org/terceiro/blog/a-better-svn-diff</guid></item><item><title>Fazendo o svn diff ser suportável</title><description>&lt;p&gt;Já tem um tempo que eu uso git diariamente, e a opção de colocar cores nas saídas dos comandos é extremamente útil. Especialmente quando você quer ver um diff, isso facilita a sua vida. Daí quando você por algum motivo precisa usar svn de novo, seja pra mandar um patch pra um projeto que ainda usa svn, seja pra um projeto seu que ainda esteja nas trevas, vem aquele diff feio. Seus problemas acabaram:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;edite o arquivo ~/.subversion/config, e dentro da seção helpers, diga para o svn usar um comando diferente do default como programa diff:&lt;br&gt;&lt;code&gt;diff-cmd = /home/USERNAME/bin/svn-git-diff&lt;/code&gt;&lt;br&gt;(esse programa pode estar em qualquer diretório que esteja no seu PATH)&lt;/li&gt;
&lt;li&gt;esse svn-git-diff é um script bastante simples. O svn vai chamá-lo com um monte de parâmetros, mas os únicos que importam são o sexto e o sétimo, que indicam o arquivo original e a sua versão modificada.&lt;br&gt;&lt;div style="border: 1px solid #d3d7cf; padding: 5px; margin: 5px 0px 5px 0px;"&gt;
&lt;span style="font-family: monospace;"&gt; &lt;span style="color: #0000ff;"&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;span style="font-family: monospace;"&gt;&lt;span style="color: #a52a2a;"&gt;&lt;strong&gt;export&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: monospace;"&gt; PAGER=/bin/cat&lt;br&gt; git diff --no-index &lt;span style="color: #a52a2a;"&gt;&lt;strong&gt;"&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #a020f0;"&gt;${&lt;/span&gt;&lt;span style="color: #a020f0;"&gt;6&lt;/span&gt;&lt;span style="color: #a020f0;"&gt;}&lt;/span&gt;&lt;span style="color: #a52a2a;"&gt;&lt;strong&gt;"&lt;/strong&gt;&lt;/span&gt; &lt;span style="color: #a52a2a;"&gt;&lt;strong&gt;"&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #a020f0;"&gt;${&lt;/span&gt;&lt;span style="color: #a020f0;"&gt;7&lt;/span&gt;&lt;span style="color: #a020f0;"&gt;}&lt;/span&gt;&lt;span style="color: #a52a2a;"&gt;&lt;strong&gt;"&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;não se esqueça de tornar esse script executável com&lt;br&gt;&lt;code&gt;chmod +x /home/USERNAME/bin/svn-git-diff&lt;/code&gt; (o caminho real do arquivo vai depender se onde você o colocou).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;E era isso. Agora quando você der &lt;code&gt;svn diff&lt;/code&gt;, o diff vai sair colorido assim como quando você está verificando diffs (ou commits) no git.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update:&lt;/strong&gt; numa versão mais nova do git (1.6.5.2) é necessário passar &lt;code&gt;--no-index&lt;/code&gt; pra que o &lt;code&gt;git diff&lt;/code&gt; funcione fora de um repositório git.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update 2:&lt;/strong&gt; é preciso setar &lt;code&gt;PAGER&lt;/code&gt; para &lt;code&gt;/bin/cat&lt;/code&gt; para que o git não faça um pipe para o &lt;code&gt;less&lt;/code&gt; de cada arquivo individualmente, e sim cuspa todo o diff na tela de vez (porque o subversion vai chamar o script uma vez pra cada arquivo alterado).&lt;/p&gt;</description><pubDate>Fri, 21 Aug 2009 21:17:46 +0000</pubDate><link>http://softwarelivre.org/terceiro/blog/fazendo-o-svn-diff-ser-suportavel</link><guid>http://softwarelivre.org/terceiro/blog/fazendo-o-svn-diff-ser-suportavel</guid></item><item><title>highlighting (git) patches in mutt</title><description>&lt;p&gt;This tip is useful for those who want to read the patches before even trying them into a branch. While it's possible to read them as regular text, being able to spot directly what matters helps doing it very quicker. Drop the following lines in your &lt;code&gt;~/.muttrc&lt;/code&gt; to highlight the relevant elements in the diff:&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;pre&gt;color body brightred default "^-.*"
color body brightgreen default "^[+].*"
color body brightwhite default "^diff --git.*"
color body brightwhite default "^index [a-f0-9].*"
color body brightyellow default "^@@.*"

&lt;/pre&gt;
&lt;p&gt;Of course you can change the colors to match your preferences, I'm not even sure yet that these are the best colors for me. The result looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wiki.softwarelivre.org/pub/Blogs/BlogPostAntonioTerceiro20090423141108/mutt-git-patch.png" alt="Highlighted patch in mutt"&gt;&lt;/p&gt;</description><pubDate>Thu, 28 May 2009 21:40:43 +0000</pubDate><link>http://softwarelivre.org/terceiro/blog/highlighting-git-patches-in-mutt</link><guid>http://softwarelivre.org/terceiro/blog/highlighting-git-patches-in-mutt</guid></item><item><title>Controle de Versão e Fluxo de Trabalho em projetos de desenvolvimento de software</title><description>&lt;p&gt;Este é o material do minicurso que eu dei no &lt;a target="_top" href="http://www.eselaw.unifacs.br/"&gt;V Empirical Software Engineering Latin American Workshop&lt;/a&gt;, realizado nos últimos dias 5, 6 e 7 em Salvador.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Título:&lt;/strong&gt; Controle de versão e fluxo de trabalho em projetos de desenvolvimento de software &lt;br&gt; &lt;strong&gt;Resumo:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;Será apresentado um breve histórico dos sistemas de controle de versão livres, tanto do ponto de vista tecnológico quanto do modelo de fluxo de trabalho pressuposto pelos mesmos. Será dada ênfase em sistemas de controle de versão distribuído, em especial &lt;a target="_top" href="http://git.or.cz/"&gt;git&lt;/a&gt;, e como eles podem suportar diferentes &lt;em&gt;workflows&lt;/em&gt; em desenvolvimento de software.&lt;/blockquote&gt;
&lt;p&gt;Você pode baixar os &lt;a target="_top" href="http://wiki.softwarelivre.org/pub/Blogs/BlogPostAntonioTerceiro20081108115324/curso-vcs.pdf"&gt;slides em PDF&lt;/a&gt;. O código-fonte (LaTeX + beamer) está &lt;a target="_top" href="http://github.com/terceiro/curso-vcs"&gt;no github&lt;/a&gt;.&lt;/p&gt;
&lt;table class="twikiTable" border="1"&gt;

&lt;tr class="twikiTableOdd twikiTableRowdataBgSorted0 twikiTableRowdataBg0"&gt;
&lt;td class="twikiTableCol0 twikiFirstCol twikiLast"&gt;&lt;a href="http://creativecommons.org/licenses/by-nc-sa/2.5/br/"&gt;&lt;img style="border-width: 0;" alt="Creative Commons License" src="http://i.creativecommons.org/l/by-nc-sa/2.5/br/88x31.png"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td class="twikiTableCol1 twikiLastCol twikiLast"&gt;
&lt;span&gt;Controle de versão e fluxo de trabalho em projetos de desenvolvimento de software&lt;/span&gt; por &lt;a href="http://people.softwarelivre.org/~terceiro/"&gt;Antonio Terceiro&lt;/a&gt; é licenciado sobre uma licença &lt;a href="http://creativecommons.org/licenses/by-nc-sa/2.5/br/"&gt;Creative Commons Atribuição-Uso Não-Comercial-Compartilhamento pela mesma Licença 2.5 Brasil&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Em breve eu devo apresentar esse minicurso na &lt;a target="_top" href="http://www.im.ufba.br/"&gt;IM&lt;/a&gt;, interessados fiquem de olho.&lt;/p&gt;</description><pubDate>Thu, 28 May 2009 21:40:42 +0000</pubDate><link>http://softwarelivre.org/terceiro/blog/controle-de-versao-e-fluxo-de-trabalho-em-projetos-de-desenvolvimento-de-software</link><guid>http://softwarelivre.org/terceiro/blog/controle-de-versao-e-fluxo-de-trabalho-em-projetos-de-desenvolvimento-de-software</guid></item></channel></rss>