<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"><channel><title>Projeto Software Livre Bahia's RSS feed</title><link>http://softwarelivre.org/psl-bahia</link><description>Projeto Software Livre Bahia's content published at Software Livre Brasil</description><item><title>Existem Blobs Binários no Kernel Linux usado pelo Ubuntu?</title><description>&lt;p&gt;Recentemente, em um dos grupos de Telegram que participo foi colocado em questão: O Kernel Linux contém ou não os polêmicos Blobs binários?&lt;/p&gt;
&lt;p&gt;O &lt;a href="https://garoa.net.br/wiki/Usu%C3%A1rio:Juca" target="_blank"&gt;Juca&lt;/a&gt; afirmou que sim, baseado num processo lógico indutivo, outro participante afirmou que não baseado em... Bem, ele apenas afirmou que não. Então decidi buscar algo que ajudasse a descobrir a verdade...&lt;/p&gt;
&lt;p&gt;Para começar, o Ubuntu segue o mesmo procedimento do Debian para publicar seus pacotes. Todo pacote .deb é fruto de um pacote original vindo do upstream (projeto de origem, como Inkscape, GNOME, Linux,...) e modificações da distro, que você encontra em packages.debian.org ou packages.ubuntu.com em um "&lt;code&gt;*.debian.tar.xz&lt;/code&gt;" ou "&lt;code&gt;*.diff.gz&lt;/code&gt;"&lt;/p&gt;
&lt;p&gt;Hoje, 19/nov/2017, encontrei os pacotes &lt;code&gt;linux-image-4.9&lt;/code&gt; no Debian stable e o &lt;code&gt;linux-image-4.13&lt;/code&gt; no Ubuntu xenial. O pacote "&lt;code&gt;orig.tar.xz&lt;/code&gt;" do Debian já veio sem o diretório "&lt;code&gt;firmware&lt;/code&gt;", que ainda existe no pacote "&lt;code&gt;orig.tar.gz&lt;/code&gt;" do Ubuntu. Neste diretório estão todos ou boa parte dos Blobs. Entretanto apenas essa informação não confirma que os pacotes binários do Ubuntu contenham os Blobs. Para compilar o Linux com os firmwares é preciso passar a configuração "&lt;code&gt;CONFIG_FIRMWARE_IN_KERNEL=y&lt;/code&gt;" para o builder. Os fontes do kernel não trazem essa configuração por padrão (massa) e, como é de se esperar, o Debian não adiciona essa diretriz em seus diffs, entretanto o diff do Ubuntu sim, adiciona os firmwares para todas as arquiteturas.&lt;/p&gt;
&lt;pre style="text-align: left;"&gt;$ egrep -r '^\+{3} |CONFIG_FIRMWARE_IN_KERNEL *= *[yY]' . | grep -B1 CONFIG_FIRMWARE_IN_KERNEL&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/debian.hwe-edge/config/amd64/config.common.amd64&lt;br&gt;...diff:+CONFIG_FIRMWARE_IN_KERNEL=y&lt;br&gt;--&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/debian.hwe-edge/config/arm64/config.common.arm64&lt;br&gt;...diff:+CONFIG_FIRMWARE_IN_KERNEL=y&lt;br&gt;--&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/debian.hwe-edge/config/armhf/config.common.armhf&lt;br&gt;...diff:+CONFIG_FIRMWARE_IN_KERNEL=y&lt;br&gt;--&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/debian.hwe-edge/config/i386/config.common.i386&lt;br&gt;...diff:+CONFIG_FIRMWARE_IN_KERNEL=y&lt;br&gt;--&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/debian.hwe-edge/config/ppc64el/config.common.ppc64el&lt;br&gt;...diff:+CONFIG_FIRMWARE_IN_KERNEL=y&lt;br&gt;--&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/debian.master/config/amd64/config.common.amd64&lt;br&gt;...diff:+CONFIG_FIRMWARE_IN_KERNEL=y&lt;br&gt;--&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/debian.master/config/arm64/config.common.arm64&lt;br&gt;...diff:+CONFIG_FIRMWARE_IN_KERNEL=y&lt;br&gt;--&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/debian.master/config/armhf/config.common.armhf&lt;br&gt;...diff:+CONFIG_FIRMWARE_IN_KERNEL=y&lt;br&gt;--&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/debian.master/config/i386/config.common.i386&lt;br&gt;...diff:+CONFIG_FIRMWARE_IN_KERNEL=y&lt;br&gt;--&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/debian.master/config/ppc64el/config.common.ppc64el&lt;br&gt;...diff:+CONFIG_FIRMWARE_IN_KERNEL=y&lt;br&gt;--&lt;br&gt;...diff:+++ linux-hwe-edge-4.13.0/zfs/zfs_config.h.in&lt;br&gt;.../Makefile:# 1. Building kernel with CONFIG_FIRMWARE_IN_KERNEL=y -- $(fw-shipped-y) should&lt;/pre&gt;
&lt;p&gt;Talvez essa informação não seja suficiente para você. Justo... Então um amigo com uma máquina Ubuntu me fez o favor de executar "&lt;code&gt;dpkg -L linux-image-*&lt;/code&gt;" e no resultado estavam dezenas de firmwares diretamente relacionados aos arquivos de blobs que localizei no &lt;code&gt;tar.gz&lt;/code&gt; dos fontes. Faça você mesmo esse teste. É o mais simples e direto.&lt;/p&gt;
&lt;p&gt;Então fica claro que o Ubuntu adiciona sim blobs ao pacote compilado entregue aos seus usuários.&lt;/p&gt;
&lt;p&gt;Não podemos afirmar, apenas com essa analise, que o Debian não adiciona blobs, mas temos a declaração do projeto (&lt;a href="https://www.gnu.org/distros/common-distros.pt-br.html" target="_blank"&gt;validada pela FSF&lt;/a&gt;) de que todos os blobs foram removidos do kernel distribuído pelo Debian em 2011 e, caso seja necessário, os firmwares baseados em blobs binários estão no repositório "non-free" da distribuição.&lt;/p&gt;
&lt;h2&gt;Sim, tem Blobs, e o que isso significa?&lt;/h2&gt;
&lt;p&gt;Para começar Blobs binários nunca deveriam ter entrado no repositório do projeto Linux simplesmente porque estes são incompatíveis com a definição de Software Livre e de Código Aberto. Especificamente na liberdade 1 "&lt;em&gt;&lt;strong&gt;A liberdade de estudar como o programa funciona, e adaptá-lo às suas necessidades&lt;/strong&gt;&lt;/em&gt;" e no critério 2 "&lt;em&gt;&lt;strong&gt;Source Code (...) Deliberately obfuscated source code is not allowed. Intermediate forms such as the output of a preprocessor or translator are not allowed.&lt;/strong&gt;&lt;/em&gt;"&lt;/p&gt;
&lt;p&gt;Blobs, como qualquer software fechado, representa um limite praticamente intransponível a auditabilidade (a não ser que vc tenha MUITO tempo e dinheiro). Significa que nem você e nem o seu amigo super-mega-hacker podem afirmar que sabem exatamente o que um Blob faz, simplesmente porque você não sabe o que longas cadeias binárias como "&lt;code&gt;1000 9000 0204 007C 1217 0000 0204 0080 2217 00F6&lt;/code&gt;" significam. E, seja lá o que for, ele faz com permissões de superusuário (isso se ele estiver limitado a userland) ou com poder total em um processador dedicado (que é o caso dos firmwares).&lt;/p&gt;
&lt;p&gt;Blobs são uma forma de restringir a principal ação do ecossistema FOSS. Blobs &lt;strong&gt;impedem&lt;/strong&gt; a &lt;strong&gt;validação&lt;/strong&gt;, a &lt;strong&gt;colaboração&lt;/strong&gt; e a &lt;strong&gt;evolução&lt;/strong&gt;. Sabe a sua impressora que imprime melhor no Windows? Se o driver dela fosse livre poderíamos melhorar. Sabe a sua placa de vídeo que por um motivo desconhecido tem um FPS menor no Linux, ou superaquece, ou não responde adequadamente certas chamadas do OpenGL? Se o driver dela fosse livre poderíamos melhorar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;E quantos blobs temos hoje?&lt;/strong&gt; No diretório firmware você encontra arquivos .HEX, .H16 e .ihex. Eu acabei de contar 141 deles aqui.&lt;/p&gt;
&lt;p&gt;Poderíamos levantar algumas teorias da conspiração sobre por que a industria de hardware força a dependência dos blobs. A desculpa padrão (&lt;em&gt;rápida, fácil e superficial&lt;/em&gt;) diz que é uma forma de garantir seu diferencial. Não... Vou me conter. A verdade é que mesmo achando essa desculpa inocente, nem eu nem ninguém, fora dos boards dessa indústria, sabe o real porquê. Independente que qual seja a verdade, ignorar, &lt;strong&gt;ou pior, negar&lt;/strong&gt; o fato dos Blobs estarem presentes nas máquinas da maioria dos usuários de Linux não é só inocente ou contraprodutivo. É agir como &lt;strong&gt;fantoche do interesse alheio.&lt;/strong&gt; É dificultar o processo de remoção do stack privativo/fechado que reduz a nossa autonomia, favorece oligopólios e &lt;del&gt;ajuda o controle estatal&lt;/del&gt;.&lt;/p&gt;</description><pubDate>Tue, 21 Nov 2017 01:30:06 +0000</pubDate><link>http://softwarelivre.org/psl-bahia/blog/existem-blobs-binarios-no-kernel-linux-usado-pelo-ubuntu</link><guid>http://softwarelivre.org/psl-bahia/blog/existem-blobs-binarios-no-kernel-linux-usado-pelo-ubuntu</guid></item><item><title>Vídeo interessante sobre DevOps, com legenda em pt-br</title><description>&lt;p&gt;Desde que comecei a estudar sobre DevOps, encontrei um &lt;a target="_blank" href="https://www.youtube.com/watch?v=_I94-tJlovg"&gt;vídeo&lt;/a&gt; que me ajudou muito a entender como funciona essa nova cultura. Como o inglês ainda é uma barreira para alguns técnicos no Brasil, resolvi criar legendas em português do Brasil para esse vídeo:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Caso não apareça a legenda, habilite na barra de configuração do vídeo.&lt;/p&gt;</description><pubDate>Thu, 01 Oct 2015 15:13:10 +0000</pubDate><link>http://softwarelivre.org/psl-bahia/blog/video-interessante-sobre-devops-com-legenda-em-pt-br</link><guid>http://softwarelivre.org/psl-bahia/blog/video-interessante-sobre-devops-com-legenda-em-pt-br</guid></item><item><title>Deixando de ser artesão – Repensando a gerência de servidores</title><description>&lt;p&gt;O que seria da área de tecnologia da informação sem suas mudanças? Estamos o tempo todo nos reinventando. Repensando nossos métodos e viabilizando novas formas de melhorar nossa atuação, nossos produtos, entregando valores cada vez mais rápido.&lt;br&gt;
Nesse artigo falarei um pouco de como mudamos completamente a nossa forma de lidar com gerência de servidores.&lt;/p&gt;
&lt;div&gt;
&lt;a target="_blank" href="http://techfree.com.br/wp-content/uploads/2015/09/sysadmin_artesao.jpg"&gt;&lt;img src="http://techfree.com.br/wp-content/uploads/2015/09/sysadmin_artesao.jpg" alt="sysadmin_artesao" width="539" height="361"&gt;&lt;/a&gt;&lt;p&gt;“Antigo” administrador de servidores, que aqui chamarei de artesão.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Em um determinado momento no “passado”, os técnicos de infraestrutura de TI atuavam de forma bem manual, eles desempenham suas tarefas de forma similar a como faziam os artesãos antes do processo de industrialização. Para levantar um novo serviço, esse profissional era responsável por realizar quase todas partes do processo.&lt;/p&gt;
&lt;p&gt;O técnico de TI fazia cabo de rede, preparava instalação elétrica, fazia cotação e comprava o servidor, recebia o pedido, tirava ele da caixa e colocava no rack. Em seguida ele instalava seu sistema básico e então configurava os serviços a serem entregues ao usuário. Com o advento da virtualização, esse trabalho ficou menos oneroso, mas ainda assim o técnico ainda era responsável por manualmente criar as máquinas virtuais, instalar o sistema operacional e os serviços. Mesmo utilizando templates, ainda havia algum trabalho manual e repetitivo a fazer.&lt;/p&gt;
&lt;p&gt;As melhores práticas hoje indicam o uso de ferramentas que viabilizam a automatização de quase todo processo de entrega de um novo serviço, ou seja, hoje é possível criar o servidor, instalar os pacotes, configurar os serviços, requisitar e configurar um nome para o serviço de DNS, colocar no backup, adicionar no monitoramento, configurar a VLAN correta, solicitar as regras específicas de firewall , se registrar no balanceamento de carga e até mesmo enviar e-mail para o responsável técnico avisando quando todo esse processo automático finalizar. Todo processo iniciado com o pressionar de um botão.&lt;/p&gt;
&lt;div&gt;
&lt;a target="_blank" href="http://techfree.com.br/wp-content/uploads/2015/09/automa%C3%A7%C3%A3o.gif"&gt;&lt;img src="http://techfree.com.br/wp-content/uploads/2015/09/automa%C3%A7%C3%A3o.gif" alt="automação" width="722" height="438"&gt;&lt;/a&gt;&lt;p&gt;Robôs virtuais, fazendo o trabalho manual e repetitivo.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Assim como o artesão viu seu trabalho manual ser substituído por máquinas, os técnicos de TI estão vendo seu trabalho braçal ser realizado por ferramentas de automatização. A cultura &lt;a target="_blank" href="https://pt.wikipedia.org/wiki/DevOps"&gt;DevOps&lt;/a&gt; viabilizou um terreno fértil no campo das ideias e processos para que essa mudança fosse possível, pois não é somente de ferramentas que consiste uma mudança de paradigma, certo?&lt;/p&gt;
&lt;p&gt;Mudanças de paradigmas normalmente são traumáticas e demoraram algum tempo para se popularizar, e mesmo para área de Tecnologia da Informação, que é conhecida por sua propensão a inovação, isso não é diferente.&lt;/p&gt;
&lt;p&gt;A cultura DevOps tem como mote principal a entrega de valor, que as equipes de desenvolvimento e infraestrutura trabalhem juntas para entregar o produto. Perceba que para trabalhar junto não necessariamente indica que os desenvolvedores devem fazer o trabalho que antes era de infraestrutura e vice-versa. Estamos falando aqui de colaboração, onde ambas subáreas entendem o processo de entrega de serviço como um todo, mas tem seus papéis bem definidos.&lt;/p&gt;
&lt;p&gt;Com a derrubada do muro imaginário que existia entre desenvolvedores e infraestrutura, ambos puderam usufruir do melhor que cada área tinham a acrescentar para a outra. Os desenvolvedores puderam ter acesso a provisionar infraestruturas de forma rápida, estável e segura. Os operadores de infraestrutura puderam ter acesso as melhores práticas de desenvolvimento para que ferramentas de provisionamento, gerência de configuração e afins pudessem ser ofertadas como solução para seus trabalhos repetitivos, ou seja, para aqueles trabalhos que fazer de forma artesanal não traziam nenhuma melhora no valor, apenas impactavam negativamente no seu tempo de entrega.&lt;/p&gt;
&lt;div&gt;
&lt;a target="_blank" href="http://techfree.com.br/wp-content/uploads/2015/09/Artes%C3%A3o_REFON.jpg"&gt;&lt;img src="http://techfree.com.br/wp-content/uploads/2015/09/Artes%C3%A3o_REFON.jpg" alt="Os trabalhos manuais ainda serão necessários, porém bem menos frequentes." width="683" height="512"&gt;&lt;/a&gt;&lt;p&gt;Os trabalhos manuais ainda serão necessários, porém bem menos frequentes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Os trabalhos artesanais dependem da atenção, disposição, tempo, humor e habilidade dos artesãos de TI, hoje podem ser feitos de forma automática, altamente parametrizada e até mesmo específica, caso necessário, por softwares de gerenciamento de configuração, provisionamento e afins.&lt;/p&gt;
&lt;p&gt;Esses trabalhos não automatizados agora normalmente se restringem, ou deveriam se restringir, a atividades que demandam um cuidado maior, onde a execução manual de fato agrega valor ao produto.&lt;/p&gt;
&lt;p&gt;Assim como no caso dos trabalhadores braçais, que no passado eram obrigados a levantar enormes peças pesadas para construir produtos, os técnicos de TI eram forçados a fazer trabalhos repetitivos por falta de uma tecnologia que pudessem lhes auxiliar.&lt;/p&gt;
&lt;p&gt;Atenção técnico de infraestrutura! Do mesmo modo, como alguns profissionais braçais se queixavam das máquinas como vetor da falta de emprego, é necessário que os técnicos de TI façam uma autoavaliação do seu trabalho atual e percebam o quão repetitivo e pouco produtivo é seu dia a dia, caso você se encaixe como um artesão para todas as tarefas, talvez o processo industrial na área de gerência de servidores possa tirar seu sono no futuro, sendo assim fica aqui meu conselho: “Estude sobre as novidades do DevOps e caso ainda não saiba desenvolver código, corra, pois em pouco tempo seu chefe lhe cobrará a escrita de um módulo puppet ou receita chef para criação daquele servidor novo que antes você levava quase um dia inteiro para entregar”.&lt;/p&gt;
&lt;p&gt;Fonte: &lt;a target="_blank" href="http://pt.slideshare.net/randybias/architectures-for-open-and-scalable-clouds"&gt;http://pt.slideshare.net/randybias/architectures-for-open-and-scalable-clouds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Quer ficar antenado sobre notícias acerca essa nova cultura DevOps? Não deixe de visitar sempre (ou assinar o &lt;a target="_blank" href="http://devops-br.org/rss20.xml"&gt;feed&lt;/a&gt;) desse site: &lt;a target="_blank" href="http://devops-br.org/"&gt;http://devops-br.org/&lt;/a&gt;&lt;/p&gt;</description><pubDate>Fri, 18 Sep 2015 21:30:26 +0000</pubDate><link>http://softwarelivre.org/psl-bahia/blog/deixando-de-ser-artesao-repensando-a-gerencia-de-servidores</link><guid>http://softwarelivre.org/psl-bahia/blog/deixando-de-ser-artesao-repensando-a-gerencia-de-servidores</guid></item><item><title>Vídeo – 2º Docker Salvador</title><description>&lt;p&gt;Olha como foi o nosso 2º Docker Salvador! Aconteceu no dia 12 de setembro de 2015, no Raul Hacker Club:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Evento: &lt;a target="_blank" href="http://www.meetup.com/Docker-Salvador/events/224476092"&gt;http://www.meetup.com/Docker-Salvador/events/224476092&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Música: Biomythos (Revolution Void): &lt;a target="_blank" href="https://www.jamendo.com/en/list/a2534/thread-soul"&gt;https://www.jamendo.com/en/list/a2534/thread-soul&lt;/a&gt;&lt;/p&gt;</description><pubDate>Mon, 14 Sep 2015 16:57:39 +0000</pubDate><link>http://softwarelivre.org/psl-bahia/blog/video-2o-docker-salvador</link><guid>http://softwarelivre.org/psl-bahia/blog/video-2o-docker-salvador</guid></item><item><title>Puppet 4 e suas melhores práticas</title><description>&lt;p&gt;Com o &lt;a target="_blank" href="https://puppetlabs.com/blog/say-hello-open-source-puppet-4"&gt;lançamento do Puppet 4&lt;/a&gt;, algumas práticas serão depreciadas e outras são apenas desaconselhadas, sendo assim pretendo nesse texto fazer um resumo delas, afim de indicar quais as melhores práticas para evitar problemas no futuro.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" href="http://techfree.com.br/wp-content/uploads/2015/08/Puppet_Labs_Logo.png"&gt;&lt;img src="http://techfree.com.br/wp-content/uploads/2015/08/Puppet_Labs_Logo.png" alt="Puppet_Labs_Logo" width="311" height="145"&gt;&lt;/a&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Esse texto presume que você já sabe usar puppet, caso não saiba nada de puppet,  aconselho que leia um pouco sobre ele antes. Existe &lt;a target="_blank" href="https://puppetlabs.com/download-learning-vm?_ga=1.156183410.814240925.1438866899"&gt;um máquina virtual&lt;/a&gt; com um ambiente perfeito para aprendizado. Você segue um guia PDF praticando nessa máquina, que foi projetada pra isso. Muito bom. Aconselho!&lt;/p&gt;
&lt;p&gt;Vamos as práticas:&lt;/p&gt;
&lt;h3&gt;Herança de classe&lt;/h3&gt;
&lt;p&gt;Esse tipo de prática só é aconselhado para módulos do tipo “params”:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Má prática:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo {&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;class foo::baz inherits foo {&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Prática aceitável:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class ssh (&lt;/p&gt;
&lt;p&gt;$server = $ssh::params::server,&lt;/p&gt;
&lt;p&gt;) inherits ssh::params {&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;class ssh::params {&lt;/p&gt;
&lt;p&gt;server =&amp;gt; false,&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Chamada de módulo&lt;/h3&gt;
&lt;p&gt;Não use mais “import”. Essa função foi depreciada no Puppet 4.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Má prática:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;# foo/manifests/init.pp&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo {&lt;/p&gt;
&lt;p&gt;import ‘bar.pp’&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;# foo/manifests/bar.pp&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo::baz {&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;# foo/manifests/baz.pp&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo::baz {&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Qual classe foo::baz será usada?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boa prática:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use include ao invés de import&lt;/p&gt;
&lt;p&gt;# foo/manifests/init.pp&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo {&lt;/p&gt;
&lt;p&gt;include ‘foo::baz’&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;# foo/manifests/bar.pp&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo::baz {&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Agora sabemos exatamente o que será utilizado.&lt;/p&gt;
&lt;h3&gt;Módulos remotos&lt;/h3&gt;
&lt;p&gt;Não é aconselhável alterar localmente módulos remotos (Aqueles retirados do forge e outros repositórios externos)! Caso precise modificar algo, use o módulo remoto parametrizável, crie seu próprio módulo com base nesse uso, mas caso seja uma melhoria genérica para todos, submeta sugestões ao upstream. Lembre-se, somos uma comunidade!&lt;/p&gt;
&lt;p&gt;Lembre-se  também que você pode precisar atualizar esse módulos depois do upstream!&lt;/p&gt;
&lt;h3&gt;Variável não local&lt;/h3&gt;
&lt;p&gt;Pare de usar variável não local sem estabelecimento de escopo! É péssimo para o tratamento de problemas no futuro, pois quando existirem muitos módulos, você não terá ideia de onde esse valor é recebido.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Má prática:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo (&lt;/p&gt;
&lt;p&gt;$bar = ‘baz’&lt;/p&gt;
&lt;p&gt;){&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;class foo::baz {&lt;/p&gt;
&lt;p&gt;notify { $bar },&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Boa prática&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo (&lt;/p&gt;
&lt;p&gt;$bar = ‘baz’&lt;/p&gt;
&lt;p&gt;){&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;class foo::baz {&lt;/p&gt;
&lt;p&gt;notify { $foo::bar: },&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Variável de template&lt;/h3&gt;
&lt;p&gt;Não use variável de template sem escopo, pois algumas delas conflitavam com métodos ruby e a utilização delas sem o “@” como prefixo foi depreciada.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Má prática&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;key = &amp;lt;%= var %&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Boa prática&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;key = &amp;lt;%= @var %&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;Variável factor&lt;/h3&gt;
&lt;p&gt;Evite usar variável factor sem escopo superior.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Má prática:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo {&lt;/p&gt;
&lt;p&gt;notify {“We are on OS: $operatingsystem”:}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Boa prática&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo {&lt;/p&gt;
&lt;p&gt;notify {“We are on OS: ${::operatingsystem}”:}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A sintaxe “::” especifica que a variável está no escopo superior, assim evitando que alguma variável local de um outro módulo possa afetar o seu valor.&lt;/p&gt;
&lt;h3&gt;Validação de valor&lt;/h3&gt;
&lt;p&gt;Sempre faça validação de valor da variáveis, pois dados errados podem impactar seu ambiente.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Má prática&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo (&lt;/p&gt;
&lt;p&gt;$server = hiera(‘server’,’localhost’)&lt;/p&gt;
&lt;p&gt;){&lt;/p&gt;
&lt;p&gt;notify {“We will use Server: ${server}”:}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use a função “validate_string” do módulo stdlib para verificar se o valor recebido na variável de fato é uma string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boa prática&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class foo (&lt;/p&gt;
&lt;p&gt;$server = hiera(‘server’,’localhost’)&lt;/p&gt;
&lt;p&gt;){&lt;/p&gt;
&lt;p&gt;validate_string($server)&lt;/p&gt;
&lt;p&gt;notify {“We will use Server: ${server}”:}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Caso tenha outras sugestões, coloque como comentário! &lt;img src="http://techfree.com.br/wp-includes/images/smilies/simple-smile.png" alt=":)"&gt;&lt;/p&gt;
&lt;p&gt;Esse texto foi feito com base &lt;a target="_blank" href="http://pt.slideshare.net/PuppetLabs/upgrading-puppet"&gt;nessa apresentação&lt;/a&gt;. A minha ideia foi descrever as melhores práticas e explicar um pouco sobre elas.&lt;/p&gt;</description><pubDate>Tue, 08 Sep 2015 20:12:08 +0000</pubDate><link>http://softwarelivre.org/psl-bahia/blog/puppet-4-e-suas-melhores-praticas</link><guid>http://softwarelivre.org/psl-bahia/blog/puppet-4-e-suas-melhores-praticas</guid></item><item><title>Vídeo – Palestra sobre Docker Básico</title><description>&lt;p&gt;Realizei uma palestra no &lt;a target="_blank" href="http://calango.club/"&gt;Calango Hacker Club&lt;/a&gt;, num evento denominado “Docker MeetUp Brasília”. Após algumas edições, ela ficou assim:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</description><pubDate>Thu, 03 Sep 2015 23:40:33 +0000</pubDate><link>http://softwarelivre.org/psl-bahia/blog/video-palestra-sobre-docker-basico</link><guid>http://softwarelivre.org/psl-bahia/blog/video-palestra-sobre-docker-basico</guid></item><item><title>Coopercuc e Experimento Beer se unem para criar cerveja artesanal inédita com umbu</title><description>&lt;p&gt;&lt;img src="http://www.experimentobeer.com/images/siason-umbu/img_rotulo.png" alt="" width="320" height="280"&gt;Sim, temos novidade no 7º Festival do Umbu: árvore da caatinga que deu de beber a Antônio Conselheiro agora dá cerveja também! Batizada de Saison Umbu, a bebida é resultado da associação de uma cooperativa baiana de agricultura familiar e uma empresa mineira especializada em cervejas com frutas e especiarias brasileiras cultivadas em comunidades nativas. A cerveja foi lançada nos dias 6 e 7 de março/2015, na sétima edição do Festival Regional do Umbu, na cidade de Uauá, na Bahia, e seus fabricantes pretendem distribuí-la em todo o país, além de destinar uma parte à exportação.&lt;/p&gt;
&lt;p&gt;O &lt;a target="_blank" href="http://www.coopercuc.com.br/meio-ambiente/umbu-e-umbuzeiro/"&gt;umbu&lt;/a&gt;, de polpa suculenta e aromática, ganhou seu nome do tupi-guarani ymbu, “árvore que dá de beber”, por sua capacidade de armazenar água no ambiente árido da caatinga. Reconhecida nesse batismo pelos indígenas, a generosidade do &lt;a target="_blank" href="http://www.coopercuc.com.br/meio-ambiente/umbu-e-umbuzeiro/"&gt;umbuzeiro&lt;/a&gt; chega, no século XXI, aos apreciadores de cerveja, pelas artes da economia criativa.&lt;/p&gt;
&lt;p&gt;Uauá é uma pequena cidade no Norte baiano, palco da primeira batalha da Guerra de Canudos. Antônio Conselheiro, líder de Canudos, socorria-se das reservas de água nas grossas raízes do umbuzeiro, para resistir ao cerco das tropas federais. Hoje, a &lt;a target="_blank" href="http://www.coopercuc.com.br"&gt;Cooperativa Agropecuária Familiar de Canudos, Uauá e Curaçá (Coopercuc)&lt;/a&gt;, exporta produtos feitos com umbu para a Europa, onde fazem sucesso nas redes de comércio justo e em feiras gastronômicas promovidas pelo &lt;em&gt;&lt;a target="_blank" href="http://www.slowfoodbrasil.com/"&gt;Slow Food&lt;/a&gt;,&lt;/em&gt; movimento internacional de valorização da gastronomia e defesa da sociobiodiversidade.&lt;/p&gt;
&lt;p&gt;O trabalho de beneficiamento do umbu e a divulgação dos seus produtos teve grande impulso com o apoio do &lt;a target="_blank" href="http://www.slowfoodbrasil.com/"&gt;&lt;em&gt;Slow Food&lt;/em&gt;&lt;/a&gt;, que deu suporte à criação de minifábricas para processamento do fruto no sertão da Bahia, fortalecendo o trabalho realizado pelas comunidades integrantes da &lt;strong&gt;Coopercuc&lt;/strong&gt;. O &lt;a target="_blank" href="http://www.slowfoodbrasil.com/fortalezas/fortalezas-no-brasil/42-fortaleza-do-umbu"&gt;umbu&lt;/a&gt; é uma das &lt;a target="_blank" href="http://www.slowfoodbrasil.com/fortalezas"&gt;Fortalezas do Slow Food&lt;/a&gt; no Brasil e essas ações de apoio e suporte acontecem para defender a espécie de potenciais riscos de desaparecimento.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;Coopercuc&lt;/strong&gt; decidiu ampliar a &lt;a target="_blank" href="http://www.coopercuc.com.br/produtos/"&gt;linha de produtos Gravetero&lt;/a&gt; e experimentar a fruta no mercado das cervejas artesanais. Os escolhidos para a criação da receita e desenvolvimento da bebida foram os cervejeiros da &lt;a target="_blank" href="http://experimentobeer.com/cervejaumbu/"&gt;Experimento Beer&lt;/a&gt;, de Belo Horizonte, Minas Gerais, fundada com a missão de criar cervejas especiais que valorizam a origem e a qualidade dos ingredientes nativos dos diversos biomas brasileiros. Para isso a &lt;strong&gt;Experimento Beer&lt;/strong&gt; atua em parceria com cooperativas e comunidades de agricultura familiar e ecoextrativismo de todas as regiões do Brasil.&lt;/p&gt;
&lt;div&gt;
&lt;img src="http://www.coopercuc.com.br/imagens/2015/03/cooperativas-e-experimentobeer-fazem-pacto-pelas-cervejas.jpg" alt="Integrantes das cooperativas Coopercuc (BA), Agreco (SC) e Coocaram (RO) visitam a sede da Experimento Beer (MG) e degustam a cerveja artesanal Saison Umbu" width="560" height="340"&gt;&lt;p&gt;Integrantes das cooperativas Coopercuc (BA), Agreco (SC) e Coocaram (RO) visitam a Experimento Beer (MG), celebram parcerias e brindam com a primeira edição da cerveja artesanal Saison Umbu&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Quem alinhavou a parceria da &lt;strong&gt;Experimento Beer&lt;/strong&gt; com a &lt;strong&gt;Coopercuc&lt;/strong&gt; foi o premiado estúdio &lt;a target="_blank" href="https://www.dodesign-s.com.br/"&gt;DoDesign-s&lt;/a&gt;, escritório especializado em design e marketing que trabalha com comunidades no Brasil e na América do Sul desde 2003. A articulação da cervejaria com outras cooperativas seguem o mesmo caminho, tendo as costuras feitas pela DoDesign-s.&lt;/p&gt;
&lt;p&gt;A associação da &lt;a target="_blank" href="http://www.coopercuc.com.br"&gt;Coopercuc&lt;/a&gt; com a &lt;a target="_blank" href="http://experimentobeer.com/cervejaumbu/"&gt;Experimento Beer&lt;/a&gt; é um exemplo do que vem sendo conhecido em todo mundo como “economia criativa”, termo criado pelo britânico John Hawkins para a capacidade de traduzir novas ideias e conceitos em produtos inovadores. Olhar sob um ângulo diferente e inovador, práticas às vezes milenares – como a preparação de alimentos e bebidas – é uma das formas encontradas pela economia criativa para trazer ao mundo outros tipos de produtos, de meios de produção e de consumo.&lt;/p&gt;</description><pubDate>Wed, 02 Sep 2015 15:30:48 +0000</pubDate><link>http://softwarelivre.org/psl-bahia/blog/coopercuc-e-experimento-beer-se-unem-para-criar-cerveja-artesanal-inedita-com-umbu</link><guid>http://softwarelivre.org/psl-bahia/blog/coopercuc-e-experimento-beer-se-unem-para-criar-cerveja-artesanal-inedita-com-umbu</guid></item><item><title>DebConf15, testing debian packages, and packaging the free software web</title><description>&lt;p&gt;This is my August update, and by the far the coolest thing in it is Debconf.&lt;/p&gt;
&lt;h2&gt;Debconf15&lt;/h2&gt;
&lt;p&gt;I don’t get tired of saying it is the best conference I ever attended. First it’s a mix of meeting both new people and old friends, having the chance to chat with people whose work you admire but never had a chance to meet before. Second, it’s always quality time: an informal environment, interesting and constructive presentations and discussions.&lt;/p&gt;
&lt;p&gt;This year the venue was again very nice. Another thing that was very nice was having so many kids and families. This was no coincidence, since this was the first DebConf in which there was organized childcare. As the community gets older, this a very good way of keeping those who start having kids from being alienated from the community. Of course, not being a parent yet I have no idea how actually hard is to bring small kids to a conference like DebConf. ;-)&lt;/p&gt;
&lt;p&gt;I presented two talks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Tutorial: Functional Testing of Debian packages&lt;/strong&gt;, where I introduced the   basic concepts of &lt;span&gt;DEP&lt;/span&gt;-8/autopkgtest, and went over several examples from my   packages giving tips and tricks on how to write functional tests for Debian packages.
	&lt;ul&gt;
&lt;li&gt;
&lt;a target="_blank" href="http://meetings-archive.debian.net/pub/debian-meetings/2015/debconf15/Tutorial_functional_testing_of_Debian_packages.webm"&gt;Video recording&lt;/a&gt; (webm, ~470MB)&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="http://annex.debconf.org/debconf-share/debconf15/slides/173-tutorial-functional-testing-of-debian-packages.pdf"&gt;slides&lt;/a&gt; (&lt;span&gt;PDF&lt;/span&gt;)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;
&lt;strong&gt;Packaging the Free Software Web for the end user&lt;/strong&gt;, where I presented the motivation for, and the current state of &lt;a target="_blank" href="https://gitlab.com/shak"&gt;shak&lt;/a&gt;, a project I am working on to make it trivial for end users to install server side applications in Debian. I spent quite some hacking time during DebConf finishing a prototype of the shak web interface, which was demonstrated live in the talk (of course, as usual with live demos, not everything worked :-)).
	&lt;ul&gt;
&lt;li&gt;
&lt;a target="_blank" href="http://meetings-archive.debian.net/pub/debian-meetings/2015/debconf15/Packaging_the_free_software_web_for_the_end_user.webm"&gt;Video recording&lt;/a&gt; (webm, ~450MB)&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="http://annex.debconf.org/debconf-share/debconf15/slides/174-packaging-the-free-software-web.pdf"&gt;slides&lt;/a&gt; (&lt;span&gt;PDF&lt;/span&gt;)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There was also the now traditional Ruby BoF, where discussed the state and future of the Ruby ecosystem in Debian; and an &lt;em&gt;in promptu&lt;/em&gt; Ruby packaging workshop where we introduced the basics of packaging in general, and Ruby packaging specifically.&lt;/p&gt;
&lt;p&gt;Besides shak, I was able to hack on a few cool things during DebConf:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;debci &lt;a target="_blank" href="https://tracker.debian.org/news/705444"&gt;has been updated&lt;/a&gt; with a first version of the code to produce britney hints files that block packages that fail their tests from migrating to testing. There are some issues to be sorted out together with the release team to make sure we don’t block packages unecessarily, e.g. we don’t want to block packages that never passed their test suite — most the test suite, and not the package, is broken.&lt;/li&gt;
	&lt;li&gt;while hacking I ended up &lt;a target="_blank" href="https://tracker.debian.org/news/706879"&gt;updating jquery&lt;/a&gt; to the newest version in the 1.x series, and in fact adopting it I guess. This allowed emeto drop the embedded jquery copy I used to have in the shak repository, and since then I was able to &lt;a target="_blank" href="https://tracker.debian.org/news/708523"&gt;improve the build&lt;/a&gt; to produce an output that is identical, except for a build timestamp inside a comment and a few empty lines, to the one produced by upstream, without using grunt (.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Miscellaneous updates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a target="_blank" href="https://wiki.debian.org/Teams/Ruby/Rails4.2"&gt;Rails 4.2 in unstable&lt;/a&gt;: in order to support Diaspora (currently in experimental), and an upcoming Gitlab package (&lt;span&gt;WIP&lt;/span&gt;). This requires quite some updates, &lt;span&gt;NEW&lt;/span&gt; packages, and also making sure that Redmine is updated to a new upstream version. I did a few updates as part of this effort:
	&lt;ul&gt;
&lt;li&gt;rails 2:4.2.3-3&lt;/li&gt;
		&lt;li&gt;ruby-arel 6.0.3-1&lt;/li&gt;
		&lt;li&gt;ruby-coffee-script 2.4.1-1&lt;/li&gt;
		&lt;li&gt;ruby-coffee-script-source 1.9.1.1-1&lt;/li&gt;
		&lt;li&gt;ruby-commander 4.3.5-1&lt;/li&gt;
		&lt;li&gt;ruby-execjs 2.4.0-1&lt;/li&gt;
		&lt;li&gt;ruby-globalid 0.3.6-1&lt;/li&gt;
		&lt;li&gt;ruby-jbuilder 2.3.1-1&lt;/li&gt;
		&lt;li&gt;ruby-jquery-rails 4.0.4-2&lt;/li&gt;
		&lt;li&gt;ruby-minitest 5.8.0-1&lt;/li&gt;
		&lt;li&gt;ruby-multi-json 1.11.2-1&lt;/li&gt;
		&lt;li&gt;ruby-rack-test 0.6.3-1&lt;/li&gt;
		&lt;li&gt;ruby-sass-rails 5.0.3-1&lt;/li&gt;
		&lt;li&gt;ruby-spring 1.3.6-1&lt;/li&gt;
		&lt;li&gt;ruby-sprockets 3.3.0-1~exp2&lt;/li&gt;
		&lt;li&gt;ruby-sprockets-rails 2.3.2-1~exp1&lt;/li&gt;
		&lt;li&gt;ruby-sqlite3 1.3.10-1&lt;/li&gt;
		&lt;li&gt;ruby-turbolinks 2.5.3-1&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;
&lt;a target="_blank" href="https://packages.debian.org/sid/rerun"&gt;rerun&lt;/a&gt; (&lt;span&gt;NEW&lt;/span&gt;), a tool to launch commands and restart them on filesystem change. Very useful when writing sinatra/rack applications.&lt;/li&gt;
	&lt;li&gt;vagrant: &lt;a target="_blank" href="https://tracker.debian.org/news/704807"&gt;new upstream relaese&lt;/a&gt;, supporting VirtualBox 5.0&lt;/li&gt;
	&lt;li&gt;pinpoint: &lt;a target="_blank" href="https://tracker.debian.org/news/702727"&gt;new upstream release&lt;/a&gt;, ported to clutter-gst-3.0&lt;/li&gt;
	&lt;li&gt;chake: &lt;a target="_blank" href="https://tracker.debian.org/news/703099"&gt;new upstream release&lt;/a&gt;
&lt;/li&gt;
	&lt;li&gt;gem2deb: &lt;a target="_blank" href="https://tracker.debian.org/news/705442"&gt;new release&lt;/a&gt; with several improvements, and a &lt;a target="_blank" href="https://tracker.debian.org/news/705744"&gt;bug fix followup&lt;/a&gt;
&lt;/li&gt;
	&lt;li&gt;chef: &lt;a target="_blank" href="https://tracker.debian.org/news/707798"&gt;fix installation of initscripts&lt;/a&gt;
&lt;/li&gt;
	&lt;li&gt;pry: &lt;a target="_blank" href="https://tracker.debian.org/news/705748"&gt;fixed imcompatibility with new ruby-slop&lt;/a&gt; (RC bug)&lt;/li&gt;
	&lt;li&gt;foodcritic: &lt;a target="_blank" href="https://tracker.debian.org/news/707794"&gt;fixed test suite run during build&lt;/a&gt; (RC bug)&lt;/li&gt;
	&lt;li&gt;library updates:
	&lt;ul&gt;
&lt;li&gt;&lt;a target="_blank" href="https://tracker.debian.org/news/702681"&gt;ruby-grape-logging&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="https://tracker.debian.org/news/702726"&gt;ruby-hashie&lt;/a&gt; (2 RC bugs)&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="https://tracker.debian.org/news/703189"&gt;ruby-listen&lt;/a&gt;: new upstream release, fixed test suite (RC bug)&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="https://tracker.debian.org/news/703187"&gt;ruby-rspec-retry&lt;/a&gt;: new upstrean release, fixed test suite (RC bug)&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="https://tracker.debian.org/news/703201"&gt;ruby-dbf&lt;/a&gt;: new upstream release (sponsored, work by Christopher Baines)&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="https://tracker.debian.org/news/703348"&gt;ruby-bootstrap-sass&lt;/a&gt;: new upstream release + fixed to work on non-Rails apps&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="https://tracker.debian.org/news/705538"&gt;ruby-rails-dom-testing&lt;/a&gt; (&lt;span&gt;NEW&lt;/span&gt;, dependency for rails 4.2)&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="https://tracker.debian.org/news/705535"&gt;ruby-rails-deprecated-sanitizer&lt;/a&gt; (&lt;span&gt;NEW&lt;/span&gt;, dependency for rails 4.2)&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="https://tracker.debian.org/news/707821"&gt;ruby-rmagick&lt;/a&gt; new upstream release&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="https://tracker.debian.org/news/707988"&gt;ruby-uglifier&lt;/a&gt; new upstream release&lt;/li&gt;
		&lt;li&gt;
&lt;a target="_blank" href="https://tracker.debian.org/news/708814"&gt;ruby-cri&lt;/a&gt; (RC bug)
		&lt;ul&gt;
&lt;li&gt;I was making source+arch:all uploads for a while, but this was my first ever source-only &lt;a target="_blank" href="https://buildd.debian.org/status/logs.php?pkg=ruby-cri&amp;amp;amp;ver=2.7.0-2"&gt;upload&lt;/a&gt; of an architecture-independent package to Debian, following the &lt;a target="_blank" href="https://lists.debian.org/debian-devel-announce/2015/08/msg00007.html"&gt;recent developments&lt;/a&gt; on the topic.&lt;/li&gt;
		&lt;/ul&gt;
&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><pubDate>Mon, 31 Aug 2015 15:17:07 +0000</pubDate><link>http://softwarelivre.org/psl-bahia/blog/debconf15-testing-debian-packages-and-packaging-the-free-software-web</link><guid>http://softwarelivre.org/psl-bahia/blog/debconf15-testing-debian-packages-and-packaging-the-free-software-web</guid></item><item><title>Instalando o docker host no Windows Server</title><description>&lt;p&gt;Já tínhamos divulgado no &lt;a target="_blank" href="http://techfree.com.br/2015/04/lancamento-do-docker-1-6/"&gt;lançamento da versão 1.6&lt;/a&gt; que o cliente Docker já estava disponível para instalação no Windows, agora vamos demonstrar que é possível instalar o docker host no Windows Server 16 TP3.&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" href="http://techfree.com.br/wp-content/uploads/2015/08/CM7-jobWUAAoDbZ.jpg_large-300x200.jpeg"&gt;&lt;img src="http://techfree.com.br/wp-content/uploads/2015/08/CM7-jobWUAAoDbZ.jpg_large-300x200.jpeg" alt="CM7-jobWUAAoDbZ.jpg_large-300x200" width="300" height="200"&gt;&lt;/a&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;O ambiente ainda está em beta, tanto o Windows Server 16 TP3, quanto a compatibilidade do Docker para Windows. A função push por exemplo ainda não está habilitada.&lt;/p&gt;
&lt;p&gt;Mesmo sendo beta, acho que vale a pena testar pra ao menos entender como funciona.&lt;/p&gt;
&lt;p&gt;Caso você use GNU/Linux e não queira instalar o Windows no seu disco rígido, você pode usar o virtualbox pra isso, mas não se esqueça de instalar a versão mais nova dele. Eu precisei instalar o VirtualBox da Sun na versão 5.0.2.&lt;/p&gt;
&lt;p&gt;Primeiro baixe o &lt;a target="_blank" href="http://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-technical-preview"&gt;CD do Windows Server 16 TP3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Depois crie uma nova máquina virtual do tipo “Windows” e versão “Other Windows 64-bit”&lt;/p&gt;
&lt;p&gt;Monte a ISO que acabou de baixar e inicie a instalação.&lt;/p&gt;
&lt;p&gt;Quando solicitar qual o tipo de instalação, instale a que não requer experiência de usuário.&lt;/p&gt;
&lt;p&gt;A instalação será bem rápida. (Por mais incrível que pareça). Ele solicitará a mudança de senha, para alternar entre campos de senha use “tab” e não “enter”.&lt;/p&gt;
&lt;p&gt;Quando lhe for concedido acesso ao console digite:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;powershell&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Depois digite:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;wget -uri http://aka.ms/setupcontainers -OutFile C:\ContainerSetup.ps1&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Após baixar o script, digite o comando abaixo para instalar o docker:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;C:\.\ContainerSetup.ps1&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ele reiniciará sua máquina virtual e demorará um pouco nessa tela (Caso sua internet seja tão lenta quanto a minha):&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" href="http://techfree.com.br/wp-content/uploads/2015/08/Sele%C3%A7%C3%A3o_006.png"&gt;&lt;img src="http://techfree.com.br/wp-content/uploads/2015/08/Sele%C3%A7%C3%A3o_006.png" alt="Seleção_006" width="538" height="83"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Essa é a tela que demonstra que o Docker foi instalado com sucesso:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" href="http://techfree.com.br/wp-content/uploads/2015/08/Sele%C3%A7%C3%A3o_007.png"&gt;&lt;img src="http://techfree.com.br/wp-content/uploads/2015/08/Sele%C3%A7%C3%A3o_007.png" alt="Seleção_007" width="531" height="208"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Obs: Caso apresente um erro de “timeout” tente o comando novamente &lt;img src="http://techfree.com.br/wp-includes/images/smilies/simple-smile.png" alt=":)"&gt; Isso aconteceu comigo e logo em seguida funcionou tranquilamente. Apenas demorou um pouco&lt;/p&gt;
&lt;p&gt;Para iniciar uma máquina é muito simples&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;docker.exe run -it windowsservercore cmd.exe&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Infelizmente ainda não é possível executar containers do GNU/Linux no Docker Host Windows, nem vice-versa, porem é possível usar os comandos docker e Dockerfile da mesma forma, apenas usando os as chamadas de comandos “RUN” equivalentes com cada sistema operacional.&lt;/p&gt;
&lt;p&gt;O Docker funciona no Windows de forma semelhante ao GNU/Linux, ou seja, a promessa é que ele execute os containers de forma isolada também.&lt;/p&gt;
&lt;p&gt;Divirta-se!&lt;/p&gt;
&lt;p&gt;Fonte:&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" href="http://www.virtualclouds.info/?p=3393"&gt;http://www.virtualclouds.info/?p=3393&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" href="https://blog.docker.com/2015/08/tp-docker-engine-windows-server-2016/"&gt;https://blog.docker.com/2015/08/tp-docker-engine-windows-server-2016/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</description><pubDate>Sun, 30 Aug 2015 11:08:29 +0000</pubDate><link>http://softwarelivre.org/psl-bahia/blog/instalando-o-docker-host-no-windows-server</link><guid>http://softwarelivre.org/psl-bahia/blog/instalando-o-docker-host-no-windows-server</guid></item><item><title>Lançamento do Docker 1.8</title><description>&lt;p&gt;Não para de ter novidade no Docker! Mais um lançamento e muitas novidades.&lt;/p&gt;
&lt;h3&gt;Docker Content Trust&lt;/h3&gt;
&lt;p&gt;Agora é possí&lt;a target="_blank" href="http://techfree.com.br/wp-content/uploads/2015/08/notary.png"&gt;&lt;img src="http://techfree.com.br/wp-content/uploads/2015/08/notary.png" alt="notary" width="209" height="188"&gt;&lt;/a&gt;vel assinar as imagens com sua chave privada antes de enviar para nuvem, com isso é possível validar as imagens e evitar que aconteçam fraudes no meio. Isso torna a solução como um todo bem mais segura.&lt;/p&gt;
&lt;p&gt;Quer ler um pouco mais sobre o assunto? Veja esse &lt;a target="_blank" href="http://blog.docker.com/2015/08/content-trust-docker-1-8/"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Docker Toolbox&lt;/h3&gt;
&lt;p&gt;Novo pacote de instalação para Mac OS X e Windows. Que conta com Docker client, Machine, Compose(Esse só para Max OS X) e virtualbox. Tudo que você precisa.&lt;/p&gt;
&lt;p&gt;Mais informações sobre o ToolBox? Leia &lt;a target="_blank" href="http://blog.docker.com/2015/08/docker-toolbox/"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
&lt;a target="_blank" href="http://techfree.com.br/wp-content/uploads/2015/08/toolbox.png"&gt;&lt;img src="http://techfree.com.br/wp-content/uploads/2015/08/toolbox-300x295.png" alt="toolbox" width="300" height="295"&gt;&lt;/a&gt;Docker Engine 1.8&lt;/h3&gt;
&lt;p&gt;Essa nova versão da engine do Docker trás as novidades mais impactantes desse lançamento! Lembra que no lançamento que divulguei &lt;a target="_blank" href="http://techfree.com.br/2015/04/lancamento-do-docker-1-6/"&gt;aqui&lt;/a&gt;, foi informado que o Docker tinha suporte a logs? Então, agora esse suporte aumentou, é suportado &lt;a target="_blank" href="https://www.graylog.org/centralize-your-docker-container-logging-with-graylog-native-integration/"&gt;GELF&lt;/a&gt; e &lt;a target="_blank" href="http://blog.treasuredata.com/blog/2015/08/03/5-use-cases-docker-fluentd/"&gt;Fluentd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Agora está estável a possibilidade de volumes de empresas terceiras! Tal como &lt;a target="_blank" href="http://www.blockbridge.com/announcing-blockbridge-staac-volume-plugin-for-docker-1-8/"&gt;Blockbridge&lt;/a&gt;, &lt;a target="_blank" href="https://github.com/contiv/volplugin"&gt;Ceph&lt;/a&gt;, &lt;a target="_blank" href="https://clusterhq.com/2015/08/04/docker-volume-plugins"&gt;ClusterHQ&lt;/a&gt;, &lt;a target="_blank" href="http://blog.emccode.com/2015/07/29/docker-1-8-volume-plugins-and-rex-ray/"&gt;EMC&lt;/a&gt; e &lt;a target="_blank" href="http://portworx.com/blog/docker-storage-plugin-facilitates-orchestration-of-stateful-containers/"&gt;Portworx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O binário docker agora tem suporte a enviar arquivos para o container:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;b&gt;&lt;code&gt;docker cp foo.txt mycontainer:/foo.txt&lt;/code&gt;&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;O parâmetro “ps” agora tem suporte a modificação de formato “–format”.&lt;/p&gt;
&lt;p&gt;E por fim, agora as configurações de cliente docker são armazenadas em ~/.docker. No caso de precisar executar múltiplas configurações em uma só máquina, você pode usar o parâmetro –config ou a variável de ambiente DOCKER_CONFIG.&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;</description><pubDate>Tue, 25 Aug 2015 06:22:18 +0000</pubDate><link>http://softwarelivre.org/psl-bahia/blog/lancamento-do-docker-1.8</link><guid>http://softwarelivre.org/psl-bahia/blog/lancamento-do-docker-1.8</guid></item></channel></rss>