<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"><channel><title>Conteúdo de Antonio Terceiro marcado com a tag "pristine-tar"</title><link>http://softwarelivre.org/terceiro</link><description>Conteúdo de Antonio Terceiro marcado com a tag "pristine-tar"</description><item><title>pristine-tar updates</title><description>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://packages.debian.org/pristine-tar"&gt;pristine-tar&lt;/a&gt; is a tool that is present in the workflow of a lot of Debian people. I adopted it last year after it has been orphaned by its creator &lt;a href="https://joeyh.name/"&gt;Joey Hess&lt;/a&gt;. A little after that &lt;a href="https://tomasz.buchert.pl/"&gt;Tomasz Buchert&lt;/a&gt; joined me and we are now a functional two-person team.&lt;/p&gt;
&lt;p&gt;pristine-tar goals are to import the content of a pristine upstream tarball into a &lt;span class="caps"&gt;VCS&lt;/span&gt; repository, and being able to later reconstruct that exact same tarball, bit by bit, based on the contents in the &lt;span class="caps"&gt;VCS&lt;/span&gt;, so we don&amp;#8217;t have to store a full copy of that tarball. This is done by storing a binary delta files which can be used to reconstruct the original tarball from a tarball produced with the contents of the &lt;span class="caps"&gt;VCS&lt;/span&gt;. Ultimately, we want to make sure that the tarball that is uploaded to Debian is exactly the same as the one that has been downloaded from upstream, without having to keep a full copy of it around if all of its contents is already extracted in the &lt;span class="caps"&gt;VCS&lt;/span&gt; anyway.&lt;/p&gt;
&lt;h2&gt;The current state of the art, and perspectives for the future&lt;/h2&gt;
&lt;p&gt;pristine-tar solves a &lt;a href="https://en.wikipedia.org/wiki/Wicked_problem"&gt;wicked problem&lt;/a&gt;, because our ability to reconstruct the original tarball is affected by changes in the behavior of &lt;code&gt;tar&lt;/code&gt; and of all of the compression tools (&lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;bzip2&lt;/code&gt;, &lt;code&gt;xz&lt;/code&gt;) and by what exact options were used when creating the original tarballs. Because of this, pristine-tar currently has a few embedded copies of old versions of compressors to be able to reconstruct tarballs produced by them, and also rely on a ever-evolving patch to tar that is been carried in Debian for a while.&lt;/p&gt;
&lt;p&gt;So basically keeping pristine-tar working is a game of &lt;a href="https://en.wikipedia.org/wiki/Whac-A-Mole"&gt;Whac-A-Mole&lt;/a&gt;. Joey provided a &lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=737871"&gt;good summary of the situation when he orphaned pristine-tar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Going forward, we may need to rely on other ways of ensuring integrity of upstream source code. That could take the form of signed git tags, signed uncompressed tarballs (so that the compression doesn&amp;#8217;t matter), or maybe even a different system for storing actual tarballs. &lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=871806"&gt;Debian bug #871806&lt;/a&gt; contains an interesting discussion on this topic.&lt;/p&gt;
&lt;h2&gt;Recent improvements&lt;/h2&gt;
&lt;p&gt;Even if keeping pristine-tar useful in the long term  will be hard, too much of Debian work currently relies on it, so we can&amp;#8217;t just abandon it. Instead, we keep figuring out ways to improve. And I have good news: pristine-tar has recently received updates that improve the situation quite a bit.&lt;/p&gt;
&lt;p&gt;In order to be able to understand how better we are getting at it, I created a &amp;quot;visualization of the &lt;a href="https://people.debian.org/~terceiro/pristine-tar/"&gt;regression test suite results&lt;/a&gt;. With the help of data from there, let&amp;#8217;s look at the improvements made since pristine-tar 1.38, which was the version included in stretch.&lt;/p&gt;
&lt;h3&gt;pristine-tar 1.39: xdelta3 by default.&lt;/h3&gt;
&lt;p&gt;This was the first release made after the stretch release, and made &lt;code&gt;xdelta3&lt;/code&gt; the default delta generator for newly-imported tarballs. Existing tarballs with deltas produced by &lt;code&gt;xdelta&lt;/code&gt; are still supported, this only affects new imports.&lt;/p&gt;
&lt;p&gt;The support for having multiple delta generator was written by Tomasz, and was already there since 1.35, but we decided to only flip the switch after using xdelta3 was supported in a stable release.&lt;/p&gt;
&lt;h3&gt;pristine-tar 1.40: improved compression heuristics&lt;/h3&gt;
&lt;p&gt;pristine-tar uses a few heuristics to produce the smaller delta possible, and this includes trying different compression options. In the release Tomasz included a contribution by Lennart Sorensen to also try the &lt;code&gt;--gnu&lt;/code&gt;, which gretly improved the support for rsyncable gzip compressed files. We can see an example of the type of improvement we got in the &lt;a href="https://people.debian.org/~terceiro/pristine-tar/"&gt;regression test suite data for delta sizes&lt;/a&gt; for &lt;code&gt;faad2_2.6.1.orig.tar.gz&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="/articles/0173/3653/1_40.png" title="In 1.40, the delta produced from the test tarball faad2_2.6.1.orig.tar.gz went down from 800KB, almost the same size of tarball itself, to 6.8KB" alt="In 1.40, the delta produced from the test tarball faad2_2.6.1.orig.tar.gz went down from 800KB, almost the same size of tarball itself, to 6.8KB" /&gt;&lt;/p&gt;
&lt;h3&gt;pristine-tar 1.41: support for signatures&lt;/h3&gt;
&lt;p&gt;This release saw the addition of support for storage and retrieval of upstream signatures, contributed by Chris Lamb.&lt;/p&gt;
&lt;h3&gt;pristine-tar 1.42: optionally recompressing tarballs&lt;/h3&gt;
&lt;p&gt;I had this idea and wanted to try it out: most of our problems reproducing tarballs come from tarballs produced with old compressors, or from changes in compressor behavior, or from uncommon compression options being used. What if we could just recompress the tarballs before importing then? Yes, this kind of breaks the &amp;#8220;pristine&amp;#8221; bit of the whole business, but on the other hand, 1) the contents of the tarball are not affected, and 2) even if the initial tarball is not bit by bit the same that upstream release, at least future uploads of that same upstream version with Debian revisions can be regenerated just fine.&lt;/p&gt;
&lt;p&gt;In some cases, as the case for the test tarball &lt;code&gt;util-linux_2.30.1.orig.tar.xz&lt;/code&gt;, recompressing is what makes it possible to reproduce the tarball (and thus import it with pristine-tar) possible at all:&lt;/p&gt;
&lt;p&gt;&lt;img src="/articles/0173/3655/1_42_fail.png" title="util-linux_2.30.1.orig.tar.xz can only be imported after being recompressed" alt="util-linux_2.30.1.orig.tar.xz can only be imported after being recompressed" /&gt;&lt;/p&gt;
&lt;p&gt;In other cases, if the current heuristics can&amp;#8217;t produce a reasonably small delta, recompressing makes a huge difference. It&amp;#8217;s the case for &lt;code&gt;mumble_1.1.8.orig.tar.gz&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="/articles/0173/3654/1_42_reduce.png" title="with recompression, the delta produced from mumble_1.1.8.orig.tar.gz goes from 1.2MB, or 99% of the size to the original tarball, to 14.6KB, 1% of the size of original tarball" alt="with recompression, the delta produced from mumble_1.1.8.orig.tar.gz goes from 1.2MB, or 99% of the size to the original tarball, to 14.6KB, 1% of the size of original tarball" /&gt;&lt;/p&gt;
&lt;p&gt;Recompressing is not enabled by default, and can be enabled by passing the &lt;code&gt;--recompress&lt;/code&gt; option. If you are using &lt;code&gt;pristine-tar&lt;/code&gt; via a wrapper tool like &lt;code&gt;gbp-buildpackage&lt;/code&gt;, you can use the &lt;code&gt;$PRISTINE_TAR&lt;/code&gt; environment variable to set options that will affect any pristine-tar invocations.&lt;/p&gt;
&lt;p&gt;Also, even if you enable recompression, pristine-tar will only try it if the delta generations fails completely, of if the delta produced from the original tarball is too large. You can control what &amp;#8220;too large&amp;#8221; means by using the &lt;code&gt;--recompress-threshold-bytes&lt;/code&gt; and &lt;code&gt;--recompress-threshold-percent&lt;/code&gt; options. See the &lt;b&gt;pristine-tar(1)&lt;/b&gt; manual page for details.&lt;/p&gt;</description><pubDate>Mon, 09 Oct 2017 15:06:22 +0000</pubDate><link>http://softwarelivre.org/terceiro/blog/pristine-tar-updates</link><guid>http://softwarelivre.org/terceiro/blog/pristine-tar-updates</guid></item><item><title>Adopting pristine-tar</title><description>&lt;p&gt;As of yesterday, I am the new maintainer of &lt;a href="https://packages.debian.org/pristine-tar"&gt;pristine-tar&lt;/a&gt;. As it is the case for most of &lt;a href="http://joeyh.name/"&gt;Joey Hess&lt;/a&gt;&amp;#8217; creations, it is an extremely useful tool, and used in a very large number of Debian packages which are maintained in git.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tracker.debian.org/news/769872"&gt;My first upload&lt;/a&gt; was most of a terrain recognition nature: I did some housekeeping tasks, such as making the build idempotent and making sure all binaries are built with security hardening flags, and wrote a few automated test cases to serve as build-time and run-time regression test suite. No functional changes have been made.&lt;/p&gt;
&lt;p&gt;As Joey &lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=737871"&gt;explained when he orphaned it&lt;/a&gt;, there are a few technical challenges involved in making sure pristine-tar stays useful in the future. Although I did read some of the code, I am not particularly familiar with the internals yet, and will be more than happy to get co-maintainers. If you are interested, please get in touch. The &lt;a href="http://anonscm.debian.org/cgit/collab-maint/pristine-tar.git"&gt;source git repository&lt;/a&gt; is right there.&lt;/p&gt;</description><pubDate>Sun, 22 May 2016 14:02:35 +0000</pubDate><link>http://softwarelivre.org/terceiro/blog/adopting-pristine-tar</link><guid>http://softwarelivre.org/terceiro/blog/adopting-pristine-tar</guid></item></channel></rss>